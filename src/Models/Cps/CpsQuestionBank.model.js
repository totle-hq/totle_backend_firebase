// src/Models/Cps/CpsQuestionBank.model.js
import { DataTypes, Op } from "sequelize";
import { sequelize1 } from "../../config/sequelize.js";

/**
 * CPS Question Bank
 *  - Stores canonical questions generated by pipelines
 *  - Hybrid rubric strategy: high-level tags inline; fine-grained weights in CpsRubricMapping
 *  - Uses semantic_hash + checksum for integrity & dedup
 */
export const CpsQuestionBank = sequelize1.define(
  "CpsQuestionBank",
  {
    // Primary key (UUID for global uniqueness; bank items live long)
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
      comment: "Global question identifier",
    },

    // Dimension this question targets (enum-like string to allow future growth)
    dimension: {
      type: DataTypes.STRING(64),
      allowNull: false,
      comment: "One of the 6 CPS meta-dimensions",
    },

    // Core content
    question: {
      type: DataTypes.TEXT,
      allowNull: false,
      comment: "Question stem (plain text). Keep media/figures out per policy.",
    },
    options: {
      type: DataTypes.ARRAY(DataTypes.TEXT),
      allowNull: false,
      comment: "Exactly 4 options; validated by pipelines",
    },
    correct_option: {
      type: DataTypes.INTEGER,
      allowNull: false,
      validate: { min: 0, max: 3 },
      comment: "0-based index into options[] (kept server-side; not sent to client)",
    },

    // Hybrid rubric
    rubric_tags: {
      type: DataTypes.ARRAY(DataTypes.STRING(64)),
      allowNull: true,
      comment: "High-level CPS parameter tags (fast read). Detailed weights in CpsRubricMapping.",
    },

    difficulty: {
      type: DataTypes.ENUM("easy", "medium", "hard"),
      allowNull: false,
      defaultValue: "medium",
      comment: "Approximate difficulty to help normalization curves.",
    },

    // Integrity & dedup
    semantic_hash: {
      type: DataTypes.STRING(64),
      allowNull: true,
      unique: false,
      comment: "MinHash/SimHash style fingerprint for dedup across question bank.",
    },
    checksum: {
      type: DataTypes.STRING(64),
      allowNull: true,
      comment: "SHA-256 or similar checksum of question text for integrity/audit.",
    },

    // Generation provenance
    batch_id: {
      type: DataTypes.BIGINT,
      allowNull: false,
      comment: "Links to generation batch (serial in logs) for auditability.",
    },
    generation_batch_key: {
      type: DataTypes.STRING(40),
      allowNull: true,
      comment: "Human-friendly key embedding timestamp + serial, e.g., 20251010T154512-000123.",
    },
    pipeline_name: {
      type: DataTypes.STRING(64),
      allowNull: true,
      comment: "Which pipeline produced this question (core/filler/etc).",
    },

    // Manual QA
    verified_by: {
      type: DataTypes.UUID,
      allowNull: true,
      comment: "Optional FK to a reviewers table in Nucleus (nullable by design).",
    },
    is_active: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: true,
      comment: "Soft-disable a question without deleting for audits.",
    },
  },
  {
    schema: "cps",
    tableName: "cps_question_bank",
    timestamps: true,
    underscored: true,
    indexes: [
      { fields: ["dimension"] },
      { fields: ["batch_id"] },
      { fields: ["pipeline_name"] },
      { fields: ["semantic_hash"] },
      { fields: ["checksum"] },
      { fields: ["is_active"] },
      { fields: ["generation_batch_key"], unique: false },
    ],
    comment: "Canonical CPS questions for IQ test generation & fallback.",
  }
);
