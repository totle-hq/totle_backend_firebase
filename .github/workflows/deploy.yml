name: Deploy Backend (main)

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1) Configure AWS (FIX: include aws-region)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # e.g. ap-southeast-2

      # 2) Get this runnerâ€™s public IP (fallback if one service fails)
      - name: Get runner public IP
        id: ip
        shell: bash
        run: |
          set -e
          IP="$(curl -fsS https://checkip.amazonaws.com || curl -fsS https://ifconfig.me)"
          echo "ip=$IP" >> "$GITHUB_OUTPUT"

      # 3) Temporarily allow SSH 22 for this runner IP
      - name: Authorize runner IP on SG (SSH 22)
        shell: bash
        run: |
          set -e
          aws ec2 authorize-security-group-ingress \
            --group-id "${{ secrets.EC2_SECURITY_GROUP_ID }}" \
            --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${{ steps.ip.outputs.ip }}/32,Description='GH Actions temp SSH'}]" \
          || echo "Ingress rule already present (continuing)."

      # 4) Package only tracked files (deterministic tarball)
      - name: Create release archive
        run: |
          git archive --format=tar.gz -o release.tgz HEAD
          ls -lh release.tgz

      # 5) Copy archive to EC2
      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}       # EC2 public IP/DNS (or EIP)
          username: ${{ secrets.EC2_USER }}    # ec2-user (Amazon Linux) or ubuntu (Ubuntu)
          key: ${{ secrets.EC2_SSH_KEY }}      # private key contents (OpenSSH/PEM)
          source: "release.tgz"
          target: "/home/${{ secrets.EC2_USER }}/"
          overwrite: true
          timeout: 120s
          command_timeout: 2m

      # 6) Unpack, install, and restart PM2 "totle-backend"
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            APP_DIR="/home/${USER}/totle-backend"
            RELEASE="/home/${USER}/release.tgz"

            mkdir -p "$APP_DIR"
            tar -xzf "$RELEASE" -C "$APP_DIR"
            rm -f "$RELEASE"
            cd "$APP_DIR"

            # Ensure pnpm is available (Amazon Linux 2023)
            corepack enable || true
            if ! command -v pnpm >/dev/null 2>&1; then
              npm i -g pnpm@9
            fi

            # Install deps (prefer lockfile; fallback if missing)
            pnpm install --frozen-lockfile || pnpm install

            # Optional build step if your app needs it:
            # pnpm run build

            # Start/restart PM2 process (listens on 5000 as per .env)
            if pm2 describe totle-backend >/dev/null 2>&1; then
              pm2 restart totle-backend
            else
              pm2 start "pnpm start" --name totle-backend --time
            fi

            pm2 save
            pm2 status

      # 7) Always revoke the temporary SSH rule
      - name: Revoke runner IP from SG
        if: always()
        shell: bash
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ secrets.EC2_SECURITY_GROUP_ID }}" \
            --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${{ steps.ip.outputs.ip }}/32}]" \
          || echo "Ingress already removed (continuing)."
