name: Deploy Backend (main)

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Safer packaging: only tracked files, avoids "file changed as we read it"
      - name: Create release archive (tracked files only)
        run: |
          git archive --format=tar.gz -o release.tgz HEAD

      # Copy archive to EC2 over SSH
      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "release.tgz"
          target: "/home/ec2-user/"

      # SSH, unpack, install, and restart PM2 app
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            APP_DIR=/home/ec2-user/totle-backend
            RELEASE=/home/ec2-user/release.tgz

            # Prepare app directory and unpack the new release
            mkdir -p "$APP_DIR"
            tar -xzf "$RELEASE" -C "$APP_DIR"
            rm -f "$RELEASE"

            cd "$APP_DIR"

            # Ensure pnpm is available
            corepack enable || true
            if ! command -v pnpm >/dev/null 2>&1; then
              npm i -g pnpm@9
            fi

            # Install deps (prefer lockfile; fall back if absent)
            pnpm install --frozen-lockfile || pnpm install

            # If your backend needs a build step, uncomment:
            # pnpm run build

            # Restart or start the PM2 process (listens on port 5000)
            if pm2 describe totle-backend >/dev/null 2>&1; then
              pm2 restart totle-backend
            else
              pm2 start "pnpm start" --name totle-backend --time
            fi

            pm2 save
